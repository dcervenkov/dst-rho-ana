/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

// Your description goes here... 

#include "Riostream.h" 

#include "RooDtLifetime.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h"
#include "tatami/tatami.h"

ClassImp(RooDtLifetime)

RooDtLifetime::RooDtLifetime(const char *name, const char *title,
		RooAbsReal& _dt,
		RooAbsReal& _tau_b,
		RooAbsReal& _expno,
		RooAbsReal& _costh,
		RooAbsReal& _ecms,
		RooAbsReal& _rec_vtntrk,
		RooAbsReal& _rec_vterr,
		RooAbsReal& _rec_vtchi2,
		RooAbsReal& _rec_vtndf,
		RooAbsReal& _asc_vtntrk,
		RooAbsReal& _asc_vterr,
		RooAbsReal& _asc_vtchi2,
		RooAbsReal& _asc_vtndf,
		RooAbsReal& _keeptagl,
		bool _is_mc,
		bool _addoutlier,
		double _alpha) :
		RooAbsPdf(name, title),
		dt("dt", "dt", this, _dt),
		tau_b("tau_b", "tau_b", this, _tau_b),
		expno("expno", "expno", this, _expno),
		costh("costh", "costh", this, _costh),
		ecms("ecms", "ecms", this, _ecms),
		rec_vtntrk("rec_vtntrk", "rec_vtntrk", this, _rec_vtntrk),
		rec_vterr("rec_vterr", "rec_vterr", this, _rec_vterr),
		rec_vtchi2("rec_vtchi2", "rec_vtchi2", this, _rec_vtchi2),
		rec_vtndf("rec_vtndf", "rec_vtndf", this, _rec_vtndf),
		asc_vtntrk("asc_vtntrk", "asc_vtntrk", this, _asc_vtntrk),
		asc_vterr("asc_vterr", "asc_vterr", this, _asc_vterr),
		asc_vtchi2("asc_vtchi2", "asc_vtchi2", this, _asc_vtchi2),
		asc_vtndf("asc_vtndf", "asc_vtndf", this, _asc_vtndf),
		keeptagl("keeptagl", "keeptagl", this, _keeptagl),
		is_mc(_is_mc),
		dt_ll(Belle::dt_resol_global::dt_llmt),
		dt_ul(Belle::dt_resol_global::dt_ulmt),
		addoutlier(_addoutlier),
		alpha(_alpha) {
}

RooDtLifetime::RooDtLifetime(const char *name, const char *title,
		RooAbsReal& _dt,
		RooAbsReal& _tau_b,
		RooAbsReal& _expno,
		RooAbsReal& _costh,
		RooAbsReal& _ecms,
		RooAbsReal& _rec_vtntrk,
		RooAbsReal& _rec_vterr,
		RooAbsReal& _rec_vtchi2,
		RooAbsReal& _rec_vtndf,
		RooAbsReal& _asc_vtntrk,
		RooAbsReal& _asc_vterr,
		RooAbsReal& _asc_vtchi2,
		RooAbsReal& _asc_vtndf,
		RooAbsReal& _keeptagl,
		bool _is_mc,
		double _dt_ll,
		double _dt_ul,
		bool _addoutlier,
		double _alpha) :
		RooAbsPdf(name, title),
		dt("dt", "dt", this, _dt),
		tau_b("tau_b", "tau_b", this, _tau_b),
		expno("expno", "expno", this, _expno),
		costh("costh", "costh", this, _costh),
		ecms("ecms", "ecms", this, _ecms),
		rec_vtntrk("rec_vtntrk", "rec_vtntrk", this, _rec_vtntrk),
		rec_vterr("rec_vterr", "rec_vterr", this, _rec_vterr),
		rec_vtchi2("rec_vtchi2", "rec_vtchi2", this, _rec_vtchi2),
		rec_vtndf("rec_vtndf", "rec_vtndf", this, _rec_vtndf),
		asc_vtntrk("asc_vtntrk", "asc_vtntrk", this, _asc_vtntrk),
		asc_vterr("asc_vterr", "asc_vterr", this, _asc_vterr),
		asc_vtchi2("asc_vtchi2", "asc_vtchi2", this, _asc_vtchi2),
		asc_vtndf("asc_vtndf", "asc_vtndf", this, _asc_vtndf),
		keeptagl("keeptagl", "keeptagl", this, _keeptagl),
		is_mc(_is_mc),
		dt_ll(_dt_ll),
		dt_ul(_dt_ul),
		addoutlier(_addoutlier),
		alpha(_alpha) {
}

RooDtLifetime::RooDtLifetime(const RooDtLifetime& other, const char* name) :
		RooAbsPdf(other, name),
		dt("dt", this, other.dt),
		tau_b("tau_b", this, other.tau_b),
		expno("expno", this, other.expno),
		costh("costh", this, other.costh),
		ecms("ecms", this, other.ecms),
		rec_vtntrk("rec_vtntrk", this, other.rec_vtntrk),
		rec_vterr("rec_vterr", this, other.rec_vterr),
		rec_vtchi2("rec_vtchi2", this, other.rec_vtchi2),
		rec_vtndf("rec_vtndf", this, other.rec_vtndf),
		asc_vtntrk("asc_vtntrk", this, other.asc_vtntrk),
		asc_vterr("asc_vterr", this, other.asc_vterr),
		asc_vtchi2("asc_vtchi2", this, other.asc_vtchi2),
		asc_vtndf("asc_vtndf", this, other.asc_vtndf),
		keeptagl("keeptagl", this, other.keeptagl),
		is_mc(other.is_mc),
		dt_ll(other.dt_ll),
		dt_ul(other.dt_ul),
		addoutlier(other.addoutlier),
		alpha(other.alpha) {
}

Double_t RooDtLifetime::evaluate() const {
	double a_k, c_k;
	Belle::CalcAkCk(costh, ecms, &a_k, &c_k, 0);

	Belle::dtres_param_t* dtres_param = Belle::get_dtres_param(expno, is_mc);

	double m_L_e = Belle::EfRkRdetRnp_fullrec(dt, 0, tau_b, a_k, c_k,
			rec_vtntrk, rec_vterr, rec_vtchi2, rec_vtndf,
			asc_vtntrk, asc_vterr, asc_vtchi2, asc_vtndf,
			keeptagl,
			dtres_param);

	double m_int_L_e = Belle::norm_EfRkRdetRnp_fullrec(dt_ll, dt_ul, 0, tau_b, a_k, c_k,
			rec_vtntrk, rec_vterr, rec_vtchi2, rec_vtndf,
			asc_vtntrk, asc_vterr, asc_vtchi2, asc_vtndf,
			keeptagl,
			dtres_param);

	if (addoutlier)
		return Belle::AddOutlier(expno, dt, m_L_e, rec_vtntrk, asc_vtntrk, dtres_param, m_int_L_e, dt_ll, dt_ul, alpha);
	else
		return (m_L_e / m_int_L_e);
}

Int_t RooDtLifetime::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const {
	if (matchArgs(allVars, analVars, dt))
		return 1;
	std::cerr << "INFO: Unsupported analytical integral was requested in RooDtLifetime::getAnalyticalIntegral(...) " <<
			"--> Numeric integration will be used." <<  std::endl;
	return 0;
}

Double_t RooDtLifetime::analyticalIntegral(Int_t code, const char* /*rangeName*/) const {
	if(code == 1)
		return 1;
	std::cerr << "ERROR: Unsupported analytical integral code=" << code << " in RooDtLifetime::analyticalIntegral(...) " <<
			"--> Return 0" << std::endl;
	return 0;
}
