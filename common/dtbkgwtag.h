/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#pragma once

// ROOT includes
#include "TF1.h"
#include "RooRealProxy.h"
#include "RooAbsPdf.h"

// Local includes
#include "constants.h"

class DtBKGWtag : public RooAbsPdf {
public:
    // Constructor without mixing parameters for lifetime fits
    DtBKGWtag(const char *name, const char *title, const bool CKM_fav, const bool mixing,
            RooAbsReal& _dt,
            RooAbsReal& _expmc,
            RooAbsReal& _expno,
            RooAbsReal& _vrerr6,
            RooAbsReal& _vterr6,
            RooAbsReal& _tau,
            RooAbsReal& _dm,
            RooAbsReal& _wtag,
            RooAbsReal& _mu_main,
            RooAbsReal& _mu_tail,
            RooAbsReal& _S_main,
            RooAbsReal& _S_tail,
            RooAbsReal& _f_tail
         );

    DtBKGWtag(const DtBKGWtag& other, const char* name=0) ;
    virtual TObject* clone(const char* newname) const {return new DtBKGWtag(*this,newname);}
    inline virtual ~DtBKGWtag() { }

    Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
    Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

    RooRealProxy dt ;
    RooRealProxy expmc ;
    RooRealProxy expno ;
    RooRealProxy vrerr6 ;
    RooRealProxy vterr6 ;
    RooRealProxy tau ;
    RooRealProxy dm ;
    RooRealProxy wtag ;
    RooRealProxy mu_main ;
    RooRealProxy mu_tail ;
    RooRealProxy S_main ;
    RooRealProxy S_tail ;
    RooRealProxy f_tail ;

    bool CKM_favored;
    bool mixing;

    Double_t evaluate() const;

private:
    //ClassDef(DSRhoPDF,1) // Your description goes here...
};
