/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "dtbkg.h"



// ROOT includes
#include "TF1.h"
#include "RooAbsReal.h"
#include "RooRealVar.h"

// BASF includes
#include "tatami/libcnvl.h"

// Local includes
#include "constants.h"

//ClassImp(DSRhoPDF)

DtBKG::DtBKG(const char *name, const char *title,
             RooAbsReal& _dt,
             RooAbsReal& _vrerr6,
             RooAbsReal& _vterr6,
             RooAbsReal& _tau,
             RooAbsReal& _f_delta,
             RooAbsReal& _mu_delta,
             RooAbsReal& _mu_lifetime,
             RooAbsReal& _f_tail,
             RooAbsReal& _S_main,
             RooAbsReal& _S_tail
            ) :
                RooAbsPdf(name,title),
                dt("dt","dt",this,_dt),
                vrerr6("vrerr6","vrerr6",this,_vrerr6),
                vterr6("vterr6","vterr6",this,_vterr6),
                tau("tau","tau",this,_tau),
                f_delta("f_delta","f_delta",this,_f_delta),
                mu_delta("mu_delta","mu_delta",this,_mu_delta),
                mu_lifetime("mu_lifetime","mu_lifetime",this,_mu_lifetime),
                f_tail("f_tail","f_tail",this,_f_tail),
                S_main("S_main","S_main",this,_S_main),
                S_tail("S_tail","S_tail",this,_S_tail)
{
}


DtBKG::DtBKG(const DtBKG& other, const char* name) :
            RooAbsPdf(other,name),
            dt("dt",this,other.dt),
            vrerr6("vrerr6",this,other.vrerr6),
            vterr6("vterr6",this,other.vterr6),
            tau("tau",this,other.tau),
            f_delta("f_delta",this,other.f_delta),
            mu_delta("mu_delta",this,other.mu_delta),
            mu_lifetime("mu_lifetime",this,other.mu_lifetime),
            f_tail("f_tail",this,other.f_tail),
            S_main("S_main",this,other.S_main),
            S_tail("S_tail",this,other.S_tail)
{
}

Double_t DtBKG::evaluate() const {
    double pdf = 0;
    double norm = 0;

    double delta_conv_main = 0;
    double norm_delta_conv_main = 0;
    double lifetime_conv_main = 0;
    double norm_lifetime_conv_main = 0;

    double delta_conv_tail = 0;
    double norm_delta_conv_tail = 0;
    double lifetime_conv_tail = 0;
    double norm_lifetime_conv_tail = 0;

    // *zerr is actually zerr**2 (we are passing *err6)
    double sigma_main = S_main * sqrt(vrerr6 + vterr6);
    double sigma_tail = S_tail * sqrt(vrerr6 + vterr6);

    delta_conv_main = Belle::gaussian(dt, mu_delta, sigma_main);
    norm_delta_conv_main =
        Belle::norm_gaussian(constants::cuts::dt_low, constants::cuts::dt_high, mu_delta, sigma_main);

    lifetime_conv_main = Belle::Ef_conv_gauss(dt, tau, mu_lifetime, sigma_main);
    norm_lifetime_conv_main = Belle::norm_Ef_conv_gauss(
        constants::cuts::dt_low, constants::cuts::dt_high, tau, mu_lifetime, sigma_main);

    delta_conv_tail = Belle::gaussian(dt, mu_delta, sigma_tail);
    norm_delta_conv_tail =
        Belle::norm_gaussian(constants::cuts::dt_low, constants::cuts::dt_high, mu_delta, sigma_tail);

    lifetime_conv_tail = Belle::Ef_conv_gauss(dt, tau, mu_lifetime, sigma_tail);
    norm_lifetime_conv_tail = Belle::norm_Ef_conv_gauss(
        constants::cuts::dt_low, constants::cuts::dt_high, tau, mu_lifetime, sigma_tail);

    pdf = f_delta * (1 - f_tail) * delta_conv_main +\
          (1 - f_delta) * (1 - f_tail) * lifetime_conv_main +\
          f_delta * f_tail * delta_conv_tail +\
          (1 - f_delta) * f_tail * lifetime_conv_tail;

    norm = f_delta * (1 - f_tail) * norm_delta_conv_main +\
           (1 - f_delta) * (1 - f_tail) * norm_lifetime_conv_main +\
           f_delta * f_tail * norm_delta_conv_tail +\
           (1 - f_delta) * f_tail * norm_lifetime_conv_tail;

    return pdf/norm;

}

Int_t DtBKG::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const {
    if(matchArgs(allVars,analVars,dt)) return 1;

    return 0 ;
}

Double_t DtBKG::analyticalIntegral(Int_t code, const char* rangeName) const {
    switch(code) {
    case 1: // Int[g,{dt}]
        return 1;
    default:
        return 0;
    }

}
